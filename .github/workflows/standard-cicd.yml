name: Pysparks CI/CD

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      module: 
        required: true
        type: string
      dockerfile:
        required: false
        type: string
        default: 'Dockerfile'
      context:
        required: false
        type: string
        default: '.'
      cluster:
        required: false
        type: string
        default: 'office'
    secrets:
      REGISTRY_SERVER:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true

jobs:
  cicd:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - 
        name: Generate Tag Version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          bump_each_commit: true
      -
        name: Generate Image Tag
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "TAG=${{ steps.version.outputs.version }}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
      -
        name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.context }}
          push: true
          file: ${{ inputs.dockerfile }}
          build-args: |
            PYPI_USERNAME=${{ secrets.PYPI_USERNAME }}
            PYPI_PASSWORD=${{ secrets.PYPI_PASSWORD }}
            MODULE=${{ inputs.module }}
          tags: ${{ secrets.REGISTRY_SERVER }}/${{ inputs.project }}:${{ env.TAG }},${{ secrets.REGISTRY_SERVER }}/${{ inputs.project}}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - 
        uses: azure/setup-helm@v3
        with:
          version: '3.9.0' # default is latest (stable)
          token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
      - 
        name: Helm deploy
        env:
          HELM_KUBECONFIG: ${{ secrets.HELM_KUBECONFIG }}
        run: |
          helm registry login pysparks.azurecr.io -u ${{ secrets.HELM_USERNAME }} -p ${{ secrets.HELM_PASSWORD }}
          mkdir -p ~/.kube
          printf "$HELM_KUBECONFIG" > ~/.kube/config
          MODULES=${{ inputs.module }}
          for MODULE in ${MODULES//,/ }; do
            NAMESPACE=`grep -e '^namespace' deploy/${MODULE}.yaml | awk '{print $2}'`
            IMAGE=`grep -e '^image' deploy/${MODULE}.yaml | awk '{print $2}'`
            [ -z "$IMAGE" ] && IMAGE=${{ secrets.REGISTRY_SERVER }}/${{ inputs.project }}:${{ env.TAG }}
            helm upgrade $MODULE -i -f deploy/${MODULE}.yaml oci://pysparks.azurecr.io/chart/common --version ${{ secrets.COMMON_CHART_VERSION }} -n $NAMESPACE --set image=$IMAGE --set project=${{ inputs.project }} --set module=$MODULE --set repo=${GITHUB_REPOSITORY} --kube-context=${{ inputs.cluster }}
          done
      # - 
      #   name: Request approval
      #   uses: trstringer/manual-approval@v1
      #   timeout-minutes: 60
      #   with:
      #     secret: ${{ github.TOKEN }}
      #     approvers: ititandev
      #     issue-title: "Require approval to deploy ${{ env.PROJECT_FULLNAME }} version ${{steps.version.outputs.version}}"
      #     minimum-approvals: 1   
